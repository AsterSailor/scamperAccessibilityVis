import { ArgDoc, Doc } from './docs.js'

export const reactiveCanvas: Doc = new Doc(
  'reactive-canvas',
  'html?', [
    new ArgDoc('width', 'number'),
    new ArgDoc('height', 'number'),
    new ArgDoc('initial', 'any'),
    new ArgDoc('view', 'function? takes a state and canvas as input and renders that state to the canvas.'),
    new ArgDoc('update', 'function? takes a message and state as input and returns a new state as output.'),
    new ArgDoc('sub1, sub2, ...', 'subscription?')
  ],
  'Creates a reactive canvas with the given width and height. The canvas renders as model with the given `initial` value and `view` function. The `update` function handles all messages generated by the given subscriptions.'
)

export const reactiveContainer: Doc = new Doc(
  'reactive-container',
  'html?', [
    new ArgDoc('initial', 'any'),
    new ArgDoc('view', 'function? takes a state as input and outputs an HTML element as output.'),
    new ArgDoc('update', 'function? takes a message and state as input and returns a new state as output.'),
    new ArgDoc('sub1, sub2, ...', 'subscription?')
  ],
  'Creates a reactive HTML container. The canvas renders as model with the given `initial` value and `view` function. The `view` function outputs an HTML tree that the container displays. The `update` function handles all messages generated by the given subscriptions.'
)

export const onButtonClick: Doc = new Doc(
  'on-button-click',
  'subscription',
  [ new ArgDoc('button', 'html') ],
  'Returns a subscription that emits a message of the form `(event-button-click id)` whenever the given button is clicked. The `id` is the given button\'s id or `void` is no `id` assigned to the button.'
)

export const onMouseClick: Doc = new Doc(
  'on-mouse-click',
  'subscription',
  [],
  'Returns a subscription that emits a message of the form `(event-mouse-click button x y)` whenever the canvas is clicked. `button` indicates which mouse button was clicked and `(x, y)` are the coordinates where the click occurred.'
)

export const onMouseHover: Doc = new Doc(
  'on-mouse-hover',
  'subscription',
  [],
  'Returns a subscription that emits a message of the form `(event-mouse-hover x y)` whenever the mouse moves over the reactive element. `(x, y)` are the coordinates of the mouse.'
)

export const onKeyDown: Doc = new Doc(
  'on-key-down',
  'subscription',
  [],
  'Returns a subscription that emits a message of the form `(event-key-down key)` whenever a key is pressed. `key` indicates the key that was pressed.'
)

export const onKeyUp: Doc = new Doc(
  'on-key-up',
  'subscription',
  [],
  'Returns a subscription that emits a message of the form `(event-key-up key)` whenever a key is released. `key` indicates the key that was released.'
)

export const onTimer: Doc = new Doc(
  'on-timer',
  'subscription',
  [ new ArgDoc('interval', 'non-negative integer') ],
  'Returns a subscription that emits a message of the form `(event-timer time elapsed)` every `interval` milliseconds. `time` is the current time since the page was loaded and `elapsed` is the time since the last timer message, all in milliseconds.'
)